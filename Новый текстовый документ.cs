В современном мире самым важным ресурсом в жизни каждого человека и любой компании является время. Любые процессы, которые можно автоматизировать и благодаря этому освободить сотрудника от их выполнения или увеличить его комфорт и тем самым уменьшить время необходимое на их выполнение, стоит оптимизировать. Автоматизация - процесс позволяющий управлять операциями, информацией, ресурсами путем использования компьютеров и программного обеспечения, они позволяют уменьшить влияние человеческого фактора на происходящие события и зачастую ускорить выполнение задач. 
В наши дни результат автоматизации процессов можно увидеть повсюду вокруг нас, начиная от покупок в магазинах, совершаемых при помощи банковских карт, заканчивая процессами на производстве. Плюсы от автоматизации процессов очень сложно переоценить, она значительно упрощает нашу жизнь, делает ее более комфортной, позволяя уменьшить количество времени, которое мы тратим на повседневные задачи.
	Об интенсивном  развитие IT сферы свидетельствуют исследования многих крупных компаний [3], что в свою очередь стимулирует искать способы повышения скорости и удобства разработки программного обеспечения. Одним из эффективных способов, как и во многих других сферах, является использование инструментов автоматизации: тестирования, проверки кода на качество и развертывания приложений. Это помогает исключить рутинные процедуры из жизни разработчиков и тестировщиков, давая возможность заняться вещами, которые не поддаются автоматизации. Так, например, автоматические тесты имеют ряд преимуществ над ручными [4]: исключается человеческий фактор, автоматические тесты работают быстрее чем человек, вследствии чего сокращаются сроки обнаружения ошибок и поставка продукта происходит быстрее, так же при использовании автоматических тестов не нужно ждать, пока освободиться нужный специалист, они работают независимо от человека, разработчик может сам запустить тесты и увидеть ошибки в своей работе.
Рост IT индустрии не мог не коснуться образовательной сферы. Ни одно учебное заведение не может обойтись без использования компьютеров, которые выполняют рутинную работу, облегчая жизнь сотрудников и студентов. Например, одним из вариантов автоматизации является проведение электронных тестов, вместо письменных, что позволяет исключить ошибку проверяющего или его необъективность. Также, можно рассмотреть образовательные онлайн платформы, которые позволяют проходить обучение без привлечения преподавателей, или значительно снизив время, которое преподаватель должен затратить на проверку работ студента или объяснение материала. Одним из примеров такой платформы является образовательный сайт ulearn.me [5] от компании СКБ Контур. Во время прохождения курса студента ждут лекции, записанные заранее, и практические задания, проверка которых происходит автоматически, без участия преподавателя, так что обучающийся может сразу видеть результат его работы, не дожидаясь проверки. Такой подход значительно сокращает время, которое преподаватель должен потратить на объяснение материала, потому что он уже записан в виде лекций и студент, в случае необходимости, можете пересмотреть непонятные моменты самостоятельно, не заставляя преподавателя повторять материал, так сокращается время, которое нужно потратить на  проверку заданий каждого студента, что в свою очередь позволяет уделить дополнительное время более сложным или непонятным частям материала. Автоматическая проверка заданий также сокращает время необходимое для его выполнения, поскольку результат виден сразу и нет необходимости ждать ответа от преподавателя.

1.2 Разработка приложений на платформе .NET
Начиная с 2020 года интерес к платформам онлайн образования возрастает, в связи с пандемией и развитием технологий упрощающих дистанционное обучение. Среди всех направлений онлайн образования, особое место занимают IT специальности [6] . Рассматривая IT сферу стоит обратить внимание на разработку приложений на платформе .NET [7]. Язык C# с 2021 года поднялся в рейтинге популярности с 8 до 6 места и количество вакансий связанных с ним продолжает увеличиваться. В связи с этим интерес абитуриентов к курсам по данному языку возрастает и появляется все больше желающих пройти обучение по соответствующему направлению.
 Из-за увеличивающегося числа студентов возрастает и нагрузка на преподавателей, появляется все больше и больше работ, которые необходимо проверять, а так, как в большинстве случаев проверка заданий проходит в ручном режиме, то этот процесс занимает все больше и больше времени, что может вызвать ухудшение качества проверки или упрощения заданий, что в свою очередь снизит уровень получаемых знаний студентом. 
Для решений проблемы затраты большого количества времени на проверку домашних работа можно автоматизировать этот процесс. На данный момент уже существуют некоторые решения позволяющие сделать процесс проверки заданий автоматическим, например, такие как ulearn.me, Яндекс.Контест [8], codeforces [9] и многие другие, однако они обладают некоторыми недостатками, такими как: преподавателю довольно сложно (или невозможно совсем) изменить программу курса, отсутствие возможности выявление плагиата работ студентов на одном курсе, неудобные отчеты о прохождении тестов работы каждого студента, отсутствие возможности централизованно хранить проделанную работу каждого студента, невозможность настройки определенного код стайла для заданий, ограниченное количество поддерживаемых языков, платное использование сервисов, необходимость хостинга сервисов.


КОНЦЕПЦИЯ ИНСТРУМЕНТАРИЯ

2.1 Оценка работ
Рассмотрим порядок действий при ручной проверке и оценке домашних работа на курсе по корпоративной разработке на платформе .NET института ИТИС КФУ. Процесс включает в себя:
Преподаватель создает репозиторий в котором буду все домашние задания группы
Студент клонирует себе репозиторий и создает отдельную ветку для каждого нового задания
После выполнения задания студент отправляет pull request из ветки задания в master ветку, для проверки задания
После наступления дедлайна преподаватель просматривает каждую ветку и запускает код из нее, чтобы проверить, что задание выполнено, также необходимо проверять код в каждой ветке на заимствование из других веток, студентов, чтобы исключить списывания.
Эти пункты довольно просты и их выполнение можно автоматизировать. Для этого необходимо определить критерии, по которым можно считать задание успешно выполненным. Однако, стоит заметить, что нельзя автоматизировать проверку полностью, например проверку функциональных требований  - можно, а проверку на следование паттернам проектирования - нет. Для выделения необходимых критериев, я обратился за помощью к преподавателю курса. В ходе нашего обсуждения мы выявили следующие необходимые критерии оценивания:
Проект с заданием студента успешно проходит этап компиляции
Все юнит тесты должны быть “зелеными”, т.е. успешно выполняться
Покрытие кода студента тестами должно быть 100%.
В коде нет заимствований из решений других студентов, находящихся в той же группе
Также, важным критерием является следование общему код стайлу, однако из-за наличия нескольких языков на курсе (С#, F# и иногда IL), подобрать линтер для них становится невозможным.

2.2 Автоматизация проверки заданий
	Для реализации автоматизации процесса проверки домашних работ была выбрана технология CI/CD GitHub Actions [10], которая интегрирована в крупнейший хостинг IT проектов GitHub. GitHub Actions - это написанные разработчиком сценарии, которые могут быть выполнены при различных событиях в репозитории, например: push в определенную ветку, открытие PR в определенную ветку, завершение другого сценария. Структура работы GitHub Actions состоит из следующих элементов:
В workflow (сценарии, рабочем процессе) находятся задачи - job (одна или несколько). По умолчанию они выполняются параллельно.
Каждая задача состоит из одного или нескольких шагов (step), которые выполняются на удаленном сервере, называемым - runner.
Каждый шаг состоит из экшена и его ввода.
Экшен - наименьший компонент workflow.
	Экшен является полноценной командой, которая запускает пользовательский код или исполняет консольные команды, выполняющиеся на виртуальных машинах GitHub. Экшен может быть создан разработчиком или выбран из предложенного каталога на GitHub. Файл конфигурации для работы GitHub Actions создается в соответствующем разделе на сайте GitHub, для его написания используется язык разметки YAML [11]. Пример конфигурации представлен на рисунке 1.

Рисунок 1. Пример конфигурационного файла на языке YAML.

	Механизм GitHub Actions был выбран из-за:
Встроенный в хостинг GitHub механизм CI/CD, благодаря этому отпадает необходимость использования сторонних сервисов
Большой выбор уже имеющихся экшенов, что упрощает реализацию
Простая и гибкая конфигурация, за счет возможности написания своих экшенов и возможности использовать инструменты CLI
Позволяет работать с большинством популярных языков программирования
Популярность хостинга GitHub, в который встроен GitHub Actions
Простота просмотра истории запусков, логов работы экшенов и создания отчетов. (Рис. 2-3)
Рисунок 2. История запусков процессов автоматизации.

Рисунок 3. Логи выполнения экшенов
	Для автоматизации проверки работ были разработаны экшены, соответствующие критериям оценки и позволяющие подтвердить или опровергнуть их выполнение.
	Всю систему можно разделить на несколько логических модулей:
Модуль ответственный за проверку компиляции и сборку проекта
Модуль ответственный за запуск тестов и проверку функционала работы студента, он же формирует отчеты об успешности прохождения тестов
Модуль ответственный за проверку процента покрытия кода тестами
Модуль ответственный за проверку код на плагиат среди работ других студентов и формирование отчета
	В результате автоматизации, процесс проверки работы можно сформулировать несколькими шагами:
Преподаватель создает репозиторий с заданиями в Github, добавляет в раздел Actions необходимые файлы конфигурации, в которых содержатся написанные экшены, согласованные с критериями оценки заданий
Студенты клонируют себе репозиторий
Создают свою ветку, от ветки в которой содержится заготовка для домашнего задания
После выполнения задания они пушат свои коммиты в ветку и отправляют PR в базовую ветку, после этого запускаются автоматизированные процессы проверки, часть из которых выполняется параллельно:
Запускается сборка проекта, проверяется, что весь проект компилируется
Выполняется проверка на покрытие кода тестами
Запускаются тесты проверяющие функционал
Формируется отчет о прохождении тестов
Запускается проверка на антиплагиат и формируется отчет о наличии заимствований


3. ТЕСТИРОВАНИЕ

3.1 Проверка функциональных требований
	Для реализации модуля тестирования функциональных требований был выбран экшн dorny/test-reporter@v1в связке  с интерфейсом CLI .NET [12].
	CLI .NET позволяет взаимодействовать с проектами написанными на платформе .NET, не зависимо от используемого языка: делать сборки, запускать тесты, осуществлять публикации и создание проектов. С помощью этого инструмента производится сборка проекта, запуск всех написанных тестов и формирование файла результатов их прохождени.
	Экшн dorny/test-reporter@v1 позволяет преобразовать .trx файл результатов прохождения тестов в полноценный отчет (Рис. 4), который будет удобен для просмотра и последующего анализа преподавателем или студентом. Для генерации и выгрузки такого отчета, потребовалось разделить тестирование на 2 разных workflow. Это связано с тем, что первый workflow (Рис 5), которые запускается при отправке  PR или коммитов имеет токен, который позволяет выполнять только операции чтения, что делает невозможно загрузить сформированный отчет. Для обхода этого ограничения был создан второй workflow (Рис 6), которые запускается после окончания работы первого, он генерирует и загружает отчет, на основе файла результатов тестирования, который был создан первым workflow. В итоге получилась последовательность:
Запуск тестов и формирование результатов их прохождения
Создание отчета по результатам прохождения тестов.

Рис. 4. Отчет о прохождении тестов.

Рисунок 5. Экшн запуска тестов и формирования файла результатов их прохождения.

Рисунок 6. Экшн для формирования отчетов по результатам работы тестов.

3.2. Проверка кода на покрытие тестами
	Для проверки кода на покрытие тестами использовался сервис codecov.io [13] совместно с GitHub Actions. Для отображения покрытия было необходимо сделать:
Настроить GitHub Actions, добавив туда экшн от codecov (Рис. 7)
Через IDE сгенерировать отчет о покрытии кода тестами
Сгенерированный отчет поместить в репозиторий и в экшене указать путь к нему
Настроить репозиторий через сайт codecov.io 
Добавить в README репозитория код, для отображения баджа с покрытием (Рис. 8)


Рисунок 7. Экшн для работы отображения покрытия кода тестами


Рисунок 8. Репозиторий с отображением покрытия кода тестами.


4. ПЛАГИАТ

4.1 Обзор инструментов
Для решения задачи нахождения заимствований кода было найдено несколько инструментов:
Облачный сервис copyleaks [14] работа которого основана на искусственном интеллекте, предназначен в том числе и для обнаружения заимствований в коде
Утилита sherlock [15] написанная на языке С, она использует цифровые подписи для поиска похожих фрагментов текста
Сервис copyleaks имеет ряд преимуществ, таких как:
Поиск заимствований среди текстов в интернете
Используется для обнаружения заимствований в коде
Возможность загружать свои тексты, которые будут учитываться при проверках
Однако, несмотря на все преимущества, сервис имеет один недостаток, наличие которого делает его использование невозможным в моих целях - платная подписка с ценой 35$ в месяц. В связи с этим выбор пал на утилиту sherlock, которая хоть и не задумывалась как инструмент поиска заимствований в коде, но все равно подходит для моих задач.

4.2 Механизм обнаружения заимствований
	Рассмотрим общую диаграмму работы механизма обнаружения зависимостей. (Рис. 9)


Рисунок 9.  Диаграмма последовательности задачи проверки решений на плагиат.

Для реализации проверки решений на плагиат мною был написан собственный экшн для GitHub Actions. В реализаци экшена я использовал технологии контейнеризации в связке с докером и язык python из-за его простоты в работе с файлами. Для создания экшена необходимо создать и опубликовать на GitHub репозиторий, в котором будет содержаться экшен. У экшена должен быть файл конфигурации, в котором описывается его работа в формате yml. Рассмотрим созданный yml файл:

В разделе name находится имя экшена, далее следует раздел description, в котором дается краткое описание экшена. В разделе inputs описываются входные значения, необходимые для работы экшена, а также указывается обязательны они или нет. В моем случае для работы необходимы токен доступа для авторизации на сервисе GitHub и имя репозитория, из которого будет вызываться экшена, в дальнейшем название репозитория понадобится для скачивания PR. В блоке runs указывается что именно должно запускаться, в моем случае это докер контейнер, образ которого собирается из файла Dockerfile, туда же передаются полученные ранее входные аргументы, токен доступа и имя репозитория. Рассмотрим Dockerfile:


После всех необходимых копирований и установок запускается скрипт entrypoint.sh, рассмотрим его:


В первом (#1) разделе мы получаем переменные окружения, которые были переданы из yml файла конфигурации и поступили из вызывающего репозитория. После этого, в разделе #2 происходит компиляция кода утилиты sherlock и помещение ее в одноименный файл, для корректной работы необходимо дать ей права на исполнение. Далее, в разделе #3, при помощи скрипта на питоне производится скачивание всех файлов из всех открытых  пулл реквестов в репозитории, для доступа к данным репозитория нужны access_token и его имя, которые мы получили ранее. Затем, в разделе #4, я удалил все ненужные файлы содержащиеся во вложенных директориях. В моем случае это: файлы репозитория git, файлы проектов proj, файлы с написанными тестами, служебные файлы сборок и GlobalUsing, при обнаружении заимствований они были бы одинаковыми у всех студентов, что давало бы ложные срабатывания и ошибочное определение заимствований. Так как для работы sherlock необходимо передать ей директорию содержащую только необходимые файлы, без других директорий, то нужно переместить все  необходимые файлы в одну директорию и удалить остальные, это происходит в разделе #5. После этого я создаю отдельную директорию (раздел #6), в которую буду помещать результаты работы программы поиска заимствований и результаты обработки, также, эта директория является местом, которое будет выгружено как артефакт работы экшена. Так как. курс корпоративной разработки на платформе .NET разделен на языки C# и F#, то потребуется два запуска sherlock (раздел #7), это связано с тем, что sherlock может одновременно работать только с файлами одного расширения. При первом запуске мы обрабатываем файлы языка C#, имеющие расширение cs, во время второго запуска - файлы языка F#, имеющие расширение fs. После этого, в разделе #8, вызывается скрипт на языку python, который обрабатывает данные полученные в результате работы sherlock. Так как sherlock сравнивает каждый файл с каждым, было важно отбрасывать результаты сравнения файлов от одного и того же пользователя. В результате работы скрипта получается матрица схожестей (Рис. 10). По ее осям располагаются имена студентов, а на пересечении процент схожести их решений. 

Рисунок 10. Матрица схожести


5. ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ 

5.1 Настройка репозитория
	Для использования созданных механизмов автоматизации преподавателю необходимо выполнить следующие шаги по настройке репозитория на хостинге GitHub:
Создать репозиторий и разместить его на хостинге GitHub.
В раздел Secrets репозитория необходимо добавить access_token (Рис 9).
В разделе Actions (Рис 10) добавить файлы конфигурации в формате YAML, которые размещены в приложении А к тексту работы.
Настроить бейдж для проверки покрытия кода тестами.
Разместить задания в репозитории и выделить для каждого из них отдельную ветку.
Добавить всех студентов в коллабораторы этого репозитория (Рис 15). 


Рисунок 9. Раздел secrets


Рисунок 10. Раздел Actions

5.2 Примеры отчетов
	В зависимости от успешности прохождения тестов могут быть сформированы несколько видов отчетов: успешные (Рис 11) и не успешные случаи. (Рис 12). Также, успешность прохождения workflow будет отображаться в репозитории, около коммитов (Рис 13 и рис. 14). 
Рисунок 11. Отчет об успешном прохождении тестов.

Рисунок 12. Отчет при не успешном прохождение тестов.


Рисунок 13. Не успешное прохождении workflow, отображение около коммита




Рисунок 14. Успешное прохождении workflow, отображение около коммита


Рисунок 15. Раздел настроек с добавлением коллабораторов в репозитории.
ЗАКЛЮЧЕНИЕ
В результате выполнений дипломной работы была достигнута цель -  создать файлы конфигурации позволяющие автоматизировать проверку задач на курсе по корпоративной разработке на платформе .NET. 
Для достижения этой цели были поставлены и выполнены следующие задачи:
Был проведен анализ предметной области автоматизации процессов. Было выявлено, что автоматизация является хорошим инструментом для упрощения жизни людей, избавления их от необходимости тратить время на рутинные задачи, позволяя потратить сэкономленное время на более сложные задачи, требующие большего количества времени и внимания. 
Был выявлен следующий список критериев оценивания домашних работ: 
Проект с заданием студента успешно проходит этап компиляции
Все юнит тесты должны быть “зелеными”, т.е. успешно выполняться
Покрытие кода студента тестами должно быть 100%.
В коде нет заимствований из решений других студентов, находящихся в той же группе.
А так же удалось разработать новый автоматизированный процесс для их проверки.
Был реализован модуль для автоматизированной проверки функциональных требований и модуль, считывающий степень покрытия итогового кода студента тестами. 
Были рассмотрены несколько инструментов, позволяющих провести проверку кода на предмет наличия заимствования решений из работ других студентов той же группы. В качестве оптимального инструмента была выбрана утилита “Sherlock”. Далее на основе этой утилиты был реализован полноценный модуль проверки кода на предмет заимствований кода из решений других студентов одной группы.
Была написана точная инструкция по использованию созданных конфигурационных файлов и настройке репозитория на хостинговом сервисе GitHub. 

Результаты данной работы опубликованы на …………… Ознакомиться с ними можно по ссылке: …………………
